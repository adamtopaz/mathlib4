/-
Copyright (c) 2023 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/

import Mathlib.Topology.Category.CompHaus.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Pullbacks

/-!

# Explicit limits and colimits

This file collects some constructions of explicit limits and colimits in `CompHaus`,
which may be useful due to their definitional properties.

So far, we have the following:
- Explicit pullbacks, defined in the "usual" way as a subset of the product.
- Explicit finite coproducts, defined as a disjoint union.

-/

namespace CompHaus

universe u

open CategoryTheory

section Pullbacks

variable {X Y B : CompHaus.{u}} (f : X ‚ü∂ B) (g : Y ‚ü∂ B)

/--
The pullback of two morphisms `f,g` in `CompHaus`, constructed explicitly as the set of
pairs `(x,y)` such that `f x = g y`, with the topology induced by the product.
-/
def pullback : CompHaus.{u} :=
  letI set := { xy : X √ó Y | f xy.fst = g xy.snd }
  haveI : CompactSpace set :=
  isCompact_iff_compactSpace.mp (isClosed_eq (f.continuous.comp continuous_fst)
    (g.continuous.comp continuous_snd)).isCompact
  CompHaus.of set

/--
The projection from the pullback to the first component.
-/
def pullback.fst : pullback f g ‚ü∂ X where
  toFun := fun ‚ü®‚ü®x,_‚ü©,_‚ü© => x
  continuous_toFun := Continuous.comp continuous_fst continuous_subtype_val

/--
The projection from the pullback to the second component.
-/
def pullback.snd : pullback f g ‚ü∂ Y where
  toFun := fun ‚ü®‚ü®_,y‚ü©,_‚ü© => y
  continuous_toFun := Continuous.comp continuous_snd continuous_subtype_val

@[reassoc]
lemma pullback.condition : pullback.fst f g ‚â´ f = pullback.snd f g ‚â´ g := by
  ext ‚ü®_,h‚ü©; exact h

/--
Construct a morphism to the explicit pullback given morphisms to the factors
which are compatible with the maps to the base.
This is essentially the universal property of the pullback.
-/
def pullback.lift {Z : CompHaus.{u}} (a : Z ‚ü∂ X) (b : Z ‚ü∂ Y) (w : a ‚â´ f = b ‚â´ g) :
    Z ‚ü∂ pullback f g where
  toFun := fun z => ‚ü®‚ü®a z, b z‚ü©, by apply_fun (fun q => q z) at w; exact w‚ü©
  continuous_toFun := by
    apply Continuous.subtype_mk
    rw [continuous_prod_mk]
    exact ‚ü®a.continuous, b.continuous‚ü©

@[reassoc (attr := simp)]
lemma pullback.lift_fst {Z : CompHaus.{u}} (a : Z ‚ü∂ X) (b : Z ‚ü∂ Y) (w : a ‚â´ f = b ‚â´ g) :
  pullback.lift f g a b w ‚â´ pullback.fst f g = a := rfl

@[reassoc (attr := simp)]
lemma pullback.lift_snd {Z : CompHaus.{u}} (a : Z ‚ü∂ X) (b : Z ‚ü∂ Y) (w : a ‚â´ f = b ‚â´ g) :
  pullback.lift f g a b w ‚â´ pullback.snd f g = b := rfl

lemma pullback.hom_ext {Z : CompHaus.{u}} (a b : Z ‚ü∂ pullback f g)
    (hfst : a ‚â´ pullback.fst f g = b ‚â´ pullback.fst f g)
    (hsnd : a ‚â´ pullback.snd f g = b ‚â´ pullback.snd f g) : a = b := by
  ext z
  apply_fun (fun q => q z) at hfst hsnd
  apply Subtype.ext
  apply Prod.ext
  ¬∑ exact hfst
  ¬∑ exact hsnd

/--
The pullback cone whose cone point is the explicit pullback.
-/
@[simps! pt œÄ]
def pullback.cone : Limits.PullbackCone f g :=
  Limits.PullbackCone.mk (pullback.fst f g) (pullback.snd f g) (pullback.condition f g)

/--
The explicit pullback cone is a limit cone.
-/
@[simps! lift]
def pullback.isLimit : Limits.IsLimit (pullback.cone f g) :=
  Limits.PullbackCone.isLimitAux _
    (fun s => pullback.lift f g s.fst s.snd s.condition)
    (fun _ => pullback.lift_fst _ _ _ _ _)
    (fun _ => pullback.lift_snd _ _ _ _ _)
    (fun _ _ hm => pullback.hom_ext _ _ _ _ (hm .left) (hm .right))

section Isos

noncomputable
def ToExplicit : Limits.pullback f g ‚ü∂ CompHaus.pullback f g :=
  pullback.lift f g Limits.pullback.fst Limits.pullback.snd Limits.pullback.condition

noncomputable
def FromExplicit : CompHaus.pullback f g ‚ü∂ Limits.pullback f g :=
  Limits.pullback.lift (pullback.fst _ _) (pullback.snd _ _) (pullback.condition f g)

@[simp]
theorem toExplicit_comp_fromExplicit_eq_id :
    (ToExplicit f g ‚â´ FromExplicit f g) = ùüô _ := by
  refine' Limits.pullback.hom_ext (k := (ToExplicit f g ‚â´ FromExplicit f g)) _ _
  ¬∑ simp [ToExplicit, FromExplicit]
  ¬∑ rw [Category.id_comp, Category.assoc, FromExplicit, Limits.pullback.lift_snd,
      ToExplicit, pullback.lift_snd]

@[simp]
theorem fromExplicit_comp_toExplicit_eq_id :
    (FromExplicit f g ‚â´ ToExplicit f g) = ùüô _ :=
  pullback.hom_ext f g _ _ (by simp [ToExplicit, FromExplicit]) (by simp [ToExplicit, FromExplicit])

@[simps]
noncomputable
def FromExplicitIso : CompHaus.pullback f g ‚âÖ Limits.pullback f g where
  hom := FromExplicit f g
  inv := ToExplicit f g
  hom_inv_id := fromExplicit_comp_toExplicit_eq_id f g
  inv_hom_id := toExplicit_comp_fromExplicit_eq_id f g

end Isos

section Compatibility

theorem explicit_fst_eq :
    CompHaus.pullback.fst f g = FromExplicit f g ‚â´ Limits.pullback.fst := by
  dsimp [FromExplicit]
  simp only [Limits.limit.lift_œÄ, Limits.PullbackCone.mk_pt, Limits.PullbackCone.mk_œÄ_app]

theorem explicit_snd_eq :
    CompHaus.pullback.snd f i = FromExplicit f i ‚â´ Limits.pullback.snd := by
  dsimp [FromExplicit]
  simp only [Limits.limit.lift_œÄ, Limits.PullbackCone.mk_pt, Limits.PullbackCone.mk_œÄ_app]

end Compatibility

end Pullbacks

section FiniteCoproducts

variable {Œ± : Type} [Fintype Œ±] (X : Œ± ‚Üí CompHaus.{u})

/--
The coproduct of a finite family of objects in `CompHaus`, constructed as the disjoint
union with its usual topology.
-/
def finiteCoproduct : CompHaus := CompHaus.of <| Œ£ (a : Œ±), X a

/--
The inclusion of one of the factors into the explicit finite coproduct.
-/
def finiteCoproduct.Œπ (a : Œ±) : X a ‚ü∂ finiteCoproduct X where
  toFun := fun x => ‚ü®a,x‚ü©
  continuous_toFun := continuous_sigmaMk (œÉ := fun a => X a)

/--
To construct a morphism from the explicit finite coproduct, it suffices to
specify a morphism from each of its factors.
This is essentially the universal property of the coproduct.
-/
def finiteCoproduct.desc {B : CompHaus.{u}} (e : (a : Œ±) ‚Üí (X a ‚ü∂ B)) :
    finiteCoproduct X ‚ü∂ B where
  toFun := fun ‚ü®a,x‚ü© => e a x
  continuous_toFun := by
    apply continuous_sigma
    intro a; exact (e a).continuous

@[reassoc (attr := simp)]
lemma finiteCoproduct.Œπ_desc {B : CompHaus.{u}} (e : (a : Œ±) ‚Üí (X a ‚ü∂ B)) (a : Œ±) :
  finiteCoproduct.Œπ X a ‚â´ finiteCoproduct.desc X e = e a := rfl

lemma finiteCoproduct.hom_ext {B : CompHaus.{u}} (f g : finiteCoproduct X ‚ü∂ B)
    (h : ‚àÄ a : Œ±, finiteCoproduct.Œπ X a ‚â´ f = finiteCoproduct.Œπ X a ‚â´ g) : f = g := by
  ext ‚ü®a,x‚ü©
  specialize h a
  apply_fun (fun q => q x) at h
  exact h

/--
The coproduct cocone associated to the explicit finite coproduct.
-/
@[simps]
def finiteCoproduct.cocone : Limits.Cocone (Discrete.functor X) where
  pt := finiteCoproduct X
  Œπ := Discrete.natTrans fun ‚ü®a‚ü© => finiteCoproduct.Œπ X a

/--
The explicit finite coproduct cocone is a colimit cocone.
-/
@[simps]
def finiteCoproduct.isColimit : Limits.IsColimit (finiteCoproduct.cocone X) where
  desc := fun s => finiteCoproduct.desc _ fun a => s.Œπ.app ‚ü®a‚ü©
  fac := fun s ‚ü®a‚ü© => finiteCoproduct.Œπ_desc _ _ _
  uniq := fun s m hm => finiteCoproduct.hom_ext _ _ _ fun a => by
    specialize hm ‚ü®a‚ü©
    ext t
    apply_fun (fun q => q t) at hm
    exact hm

section Iso

noncomputable
def ToFiniteCoproduct : ‚àê X ‚ü∂ finiteCoproduct X :=
  Limits.Sigma.desc <| fun a => finiteCoproduct.Œπ X a ‚â´ (ùüô _)

noncomputable
def FromFiniteCoproduct : finiteCoproduct X ‚ü∂ ‚àê X :=
  finiteCoproduct.desc X <| fun a => (Limits.Sigma.Œπ X a)

@[simp]
theorem toFiniteCoproduct_comp_fromFiniteCoproduct_eq_id :
    (ToFiniteCoproduct X ‚â´ FromFiniteCoproduct X) = ùüô _ := by
  ext
  simp [ToFiniteCoproduct, FromFiniteCoproduct]

@[simp]
theorem fromFiniteCoproduct_comp_toFiniteCoproduct_eq_id :
    (FromFiniteCoproduct X ‚â´ ToFiniteCoproduct X) = ùüô _ := by
  refine' finiteCoproduct.hom_ext _ _ _ (fun a => _)
  simp [ToFiniteCoproduct, FromFiniteCoproduct]

@[simps]
noncomputable
def FromFiniteCoproductIso : finiteCoproduct X ‚âÖ ‚àê X where
  hom := FromFiniteCoproduct X
  inv := ToFiniteCoproduct X
  hom_inv_id := fromFiniteCoproduct_comp_toFiniteCoproduct_eq_id X
  inv_hom_id := toFiniteCoproduct_comp_fromFiniteCoproduct_eq_id X

@[simps]
noncomputable
def ToFiniteCoproductIso : ‚àê X ‚âÖ finiteCoproduct X where
  hom := ToFiniteCoproduct X
  inv := FromFiniteCoproduct X
  hom_inv_id := toFiniteCoproduct_comp_fromFiniteCoproduct_eq_id X
  inv_hom_id := fromFiniteCoproduct_comp_toFiniteCoproduct_eq_id X

theorem isIso_toFiniteCoproduct :
    IsIso (ToFiniteCoproduct X) :=
  ‚ü®FromFiniteCoproduct X, by simp, by simp‚ü©

theorem isIso_fromFiniteCoproduct :
    IsIso (FromFiniteCoproduct X) :=
  ‚ü®ToFiniteCoproduct X, by simp, by simp‚ü©

@[simp]
theorem Sigma.Œπ_comp_toFiniteCoproduct (a : Œ±) :
    (Limits.Sigma.Œπ X a) ‚â´ ToFiniteCoproduct X = finiteCoproduct.Œπ X a := by
  simp [ToFiniteCoproduct]

@[simp]
theorem finiteCoproduct.Œπ_comp_fromFiniteCoproduct (a : Œ±) :
    (finiteCoproduct.Œπ X a) ‚â´ FromFiniteCoproduct X = Limits.Sigma.Œπ X a := by
  simp [FromFiniteCoproduct]

noncomputable
def ToFiniteCoproductHomeo : (‚àê X : _) ‚âÉ‚Çú finiteCoproduct X :=
CompHaus.homeoOfIso (FromFiniteCoproductIso X).symm

theorem ToFiniteCoproduct.OpenEmbedding : OpenEmbedding (ToFiniteCoproductHomeo X) :=
  Homeomorph.openEmbedding (ToFiniteCoproductHomeo X)

end Iso

lemma finiteCoproduct.Œπ_injective (a : Œ±) : Function.Injective (finiteCoproduct.Œπ X a) := by
  intro x y hxy
  exact eq_of_heq (Sigma.ext_iff.mp hxy).2

lemma finiteCoproduct.Œπ_jointly_surjective (R : finiteCoproduct X) :
    ‚àÉ (a : Œ±) (r : X a), R = finiteCoproduct.Œπ X a r := ‚ü®R.fst, R.snd, rfl‚ü©

lemma finiteCoproduct.Œπ_desc_apply' {B : CompHaus} {œÄ : (a : Œ±) ‚Üí X a ‚ü∂ B} (a : Œ±) :
    ‚àÄ x, finiteCoproduct.desc X œÄ (finiteCoproduct.Œπ X a x) = œÄ a x := by
  intro x
  change (Œπ X a ‚â´ desc X œÄ) _ = _
  simp only [Œπ_desc]

end FiniteCoproducts

end CompHaus

/-
Copyright (c) 2023 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import Mathlib.Analysis.Calculus.BumpFunctionFindim

/-!
# Functions which vanish as distributions vanish as functions

In a finite dimensional normed real vector space endowed with a Borel measure, consider a locally
integrable function whose integral against compactly supported smooth functions vanishes. Then
the function is almost everywhere zero.
-/

open MeasureTheory Filter Metric Function

open scoped Topology

variable {E F : Type _} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [MeasurableSpace E] [BorelSpace E] {Œº : Measure E} {f : E ‚Üí F}
  [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [CompleteSpace F]

theorem glou (hf : LocallyIntegrable f Œº)
    (h : ‚àÄ (g : E ‚Üí ‚Ñù), ContDiff ‚Ñù ‚ä§ g ‚Üí HasCompactSupport g ‚Üí ‚à´ x, g x ‚Ä¢ f x ‚àÇŒº = 0) :
    ‚àÄ·µê x ‚àÇŒº, f x = 0 := by
  apply ae_eq_zero_of_forall_set_integral_isCompact_eq_zero' hf (fun s hs ‚Ü¶ Eq.symm ?_)
  obtain ‚ü®u, u_anti, u_pos, u_lim‚ü© : ‚àÉ u, StrictAnti u ‚àß (‚àÄ (n : ‚Ñï), 0 < u n)
    ‚àß Tendsto u atTop (ùìù 0) := exists_seq_strictAnti_tendsto (0 : ‚Ñù)
  let v : ‚Ñï ‚Üí Set E := fun n ‚Ü¶ thickening (u n) s
  obtain ‚ü®K, K_compact, vK‚ü© : ‚àÉ K, IsCompact K ‚àß ‚àÄ n, v n ‚äÜ K := by
    refine' ‚ü®closure (v 0), _, fun n ‚Ü¶ _‚ü©
    ¬∑ rw [closure_thickening (u_pos 0)]
      apply isCompact_of_isClosed_bounded isClosed_cthickening hs.bounded.cthickening
    ¬∑ apply Set.Subset.trans ?_ (subset_closure)
      exact thickening_mono (u_anti.antitone (zero_le n)) _
  have : ‚àÄ n, ‚àÉ (g : E ‚Üí ‚Ñù), support g = v n ‚àß ContDiff ‚Ñù ‚ä§ g ‚àß Set.range g ‚äÜ Set.Icc 0 1
          ‚àß ‚àÄ x ‚àà s, g x = 1 := fun n ‚Ü¶ isOpen_thickening.exists_smooth_support_eq_eq_one
    hs.isClosed (self_subset_thickening (u_pos n) s)
  choose g g_supp g_diff g_range hg using this
  have L : Tendsto (fun n ‚Ü¶ ‚à´ x, g n x ‚Ä¢ f x ‚àÇŒº) atTop (ùìù (‚à´ x in s, f x ‚àÇŒº)) := sorry
  have B : ‚àÄ n, ‚à´ x, g n x ‚Ä¢ f x ‚àÇŒº = 0 := by
    intro n
    apply h _ (g_diff n)
  simpa [B] using L


#exit

IsOpen.exists_smooth_support_eq_eq_one
